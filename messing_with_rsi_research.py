# -*- coding: utf-8 -*-
"""Messing with RSI Research

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qgBjgPkSkgaohDmomkDn9ToUfWijmAY4
"""

!pip install yahoo_fin
!pip install pandas
!pip install ta
!pip install numpy

import yahoo_fin.stock_info as yf
import pandas as pd
from ta import add_all_ta_features
from ta.momentum import RSIIndicator
from datetime import datetime
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Companies in snp500
payload=pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
snp500 = payload[0]['Symbol'].values.tolist()

companies = [] #list of dataframes of stock info
for ticker in snp500:
  try:
    companies.append(yf.get_data(ticker))
  except:
    1+1

#Function to indicate close price to buy and sell
def buy_sell(dataframe):
  Buy= []
  Sell = []
  flag = -1
  for i in range(0, len(dataframe)):
    if dataframe['RSI_14_days'][i]<30:
      Sell.append(np.nan)
      if flag != 1:
        Buy.append(dataframe['close'][i])
        flag = 1
      else:
        Buy.append(np.nan)
    elif dataframe['RSI_14_days'][i]>70:
      Buy.append(np.nan)
      if flag != 0:
        Sell.append(dataframe['close'][i])
        flag = 0
      else:
        Sell.append(np.nan)
    else:
      Buy.append(np.nan)
      Sell.append(np.nan)
  return (Buy, Sell)

#Get all technical indicators
profitsPerCompany= {'Ticker Symbol': [], 'Probability of Success': [],'Total Profit ($)': []}
companyindex=0
for i in companies:
  #calculate rsi
  rsi_14 = RSIIndicator(close=i.close, window=14)
  i['RSI_14_days'] = rsi_14.rsi()
  #buy and sell signals
  b = buy_sell(i)
  i['Buy'] = b[0]
  i["Sell"] = b[1]
  #filtering naans
  BuyFilter = list(filter(lambda x: not pd.isna(x), i['Buy']))
  SellFilter = list(filter(lambda x: not pd.isna(x), i['Sell']))
  #calculate porfit per trade
  if len(BuyFilter) > len(SellFilter):
    del BuyFilter[-1]
  if len(SellFilter) > len(BuyFilter):
    del SellFilter[-1]
  profitfortrade = []
  for trade in range(len(SellFilter)): 
    profitfortrade.append(SellFilter[trade]-BuyFilter[trade])
  #Calculate occurances of profit earning trades
  positives = 0
  for i in profitfortrade:
    if i > 0:
      positives+=1
  profitsPerCompany['Ticker Symbol'].append(str(snp500[companyindex])) 
  try:
    profitsPerCompany['Probability of Success'].append(positives/len(profitfortrade))
  except:
    profitsPerCompany['Probability of Success'].append(np.nan)
  try:
    profitsPerCompany['Total Profit ($)'].append(sum(profitfortrade))
  except:
    profitsPerCompany['Total Profit ($)'].append(np.nan)
  companyindex = companyindex + 1
  print(str(companyindex) + " / " + len(companies))
data = pd.DataFrame(data=profitsPerCompany)
plt.hist(data['Probability of Success'])
data

print('Mean Success rate is ' + str(sum(data['Probability of Success'])/len(data['Probability of Success'])))
print('Median Success rate is ' + str(data['Probability of Success'][len(data['Probability of Success'])//2]))
print('Average Profit is '+ str(sum(data['Total Profit ($)'])//len(data['Total Profit ($)'])))
print('Median Profit is '+ str(data['Total Profit ($)'][len(data['Total Profit ($)'])//2]))